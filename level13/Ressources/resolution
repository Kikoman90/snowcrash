solution level13:

> ls -l
-rwsr-sr-x 1 flag13 level13 7303 Aug 30  2015 level13

> ./level13
UID 2013 started us but we we expect 4242

> ltrace ./level13
...
getuid()                                                      = 2013
...

The program calls the getuid method, which returns the UID of user level13
We need to bypass this

-> solution 1: we use gdb to control the flow of the program

> gdb level13
> (gdb) disassemble main
Dump of assembler code for function main:
   0x0804858c <+0>:	push   %ebp
   0x0804858d <+1>:	mov    %esp,%ebp
   0x0804858f <+3>:	and    $0xfffffff0,%esp
   0x08048592 <+6>:	sub    $0x10,%esp
   0x08048595 <+9>:	call   0x8048380 <getuid@plt>
   0x0804859a <+14>:	cmp    $0x1092,%eax #0x1092 is 4242 in hexadecimal
   0x0804859f <+19>:	je     0x80485cb <main+63>
   0x080485a1 <+21>:	call   0x8048380 <getuid@plt>
   0x080485a6 <+26>:	mov    $0x80486c8,%edx
   0x080485ab <+31>:	movl   $0x1092,0x8(%esp)
   0x080485b3 <+39>:	mov    %eax,0x4(%esp)
   0x080485b7 <+43>:	mov    %edx,(%esp)
   0x080485ba <+46>:	call   0x8048360 <printf@plt>
   0x080485bf <+51>:	movl   $0x1,(%esp)
   0x080485c6 <+58>:	call   0x80483a0 <exit@plt>
   0x080485cb <+63>:	movl   $0x80486ef,(%esp)
   0x080485d2 <+70>:	call   0x8048474 <ft_des>
   0x080485d7 <+75>:	mov    $0x8048709,%edx
   0x080485dc <+80>:	mov    %eax,0x4(%esp)
   0x080485e0 <+84>:	mov    %edx,(%esp)
   0x080485e3 <+87>:	call   0x8048360 <printf@plt>
   0x080485e8 <+92>:	leave
   0x080485e9 <+93>:	ret
End of assembler dump.

As we can see, the main calls the getuid method, then compares register eax with the value 4242

-> at this point, we can either set a breakpoint before the cmp instruction and then set eax to 4242, or we can jump to the instruction that gets called when the comparison is true

> (gdb) b *0x0804859a #set breakpoint at the cmp instruction
> (gdb) run
Starting program: /home/user/level13/level13

Breakpoint 1, 0x0804859a in main ()
> (gdb) set $eax=4242
> (gdb) c #continue
Continuing.
your token is 2A31L79asukciNyi8uppkEuSx

or

> (gdb) b *0x0804859a #set breakpoint at the cmp instruction
> (gdb) run
Starting program: /home/user/level13/level13

Breakpoint 1, 0x0804859a in main ()
> (gdb) jump *0x80485cb
Continuing at 0x80485cb.
your token is 2A31L79asukciNyi8uppkEuSx

-> solution 2: we create a getuid method that returns 4242 in the /tmp folder

-> we now create a dynamic lib to link with the executable
> cd /tmp
> gcc -shared getuid.c -o getuid.so

-> we change the LD_PRELOAD variable and launch the program with gdb (so that setuid is disabled)
> cd
> LD_PRELOAD=/tmp/getuid.so gdb ./level13
(gdb) run
Starting program: /home/user/level13/level13
your token is 2A31L79asukciNyi8uppkEuSx
